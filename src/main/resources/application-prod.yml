server:
  port: 8011
minio:
  endpoint: http://127.0.0.1:9000
  accessKey: admin
  secretKey: Minio962464
  bucketName: graduation-design
# ===========================================================================
# 日志输出debug级别（包括sql语句
# ===========================================================================
logging:
  level:
    org:
      springframework:
        data:
          mongodb:
            core:
              MongoTemplate: DEBUG
    com:
      company:
        cache: debug
# ===========================================================================
# JWT配置
# ===========================================================================
jwt:
  # 密匙Key
  secret: JWTSecret_Ayelsh
  # HeaderKey
  tokenHeader: Authorization
  # Token前缀
  tokenPrefix: Bearer
  # 过期时间，单位秒
  expiration: 36000
  # 刷新时间，单位天
  refreshTime: 7
  # 配置白名单（不需要认证）
  antMatchers: /login/**,/register/**,/static/**,/druid/**
spring:
  mail:
    username: 15768206596@163.com
    password: UHQLMHPWQHLPFEYE
    default-encoding: utf-8
    protocol: smtps
    host: smtp.163.com
    port: 465
    from: 15768206596@163.com
    # 配饰 SSL 加密工厂
    smtp.socketFactoryClass: javax.net.ssl.SSLSocketFactory
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true
      mail.smtp.starttls.required: true
      mail.smtp.socketFactory.port: 465
      mail.smtp.socketFactory.class: javax.net.ssl.SSLSocketFactory
      mail.smtp.socketFactory.fallback: false
    debug: true
  # ===========================================================================
  # MySql数据源
  # ===========================================================================
  datasource:
    driverClassName: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3366/mydesign
    username: prodUser
    password: 962464
    type: com.alibaba.druid.pool.DruidDataSource
    # Druid的其他属性配置
    druid:
      # 初始化时建立物理连接的个数
      initial-size: 5
      # 连接池的最小空闲数量
      min-idle: 5
      # 连接池最大连接数量
      max-active: 20
      # 获取连接时最大等待时间，单位毫秒
      max-wait: 60000
      # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 既作为检测的间隔时间又作为testWhileIdel执行的依据
      time-between-eviction-runs-millis: 60000
      # 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接(配置连接在池中的最小生存时间)
      min-evictable-idle-time-millis: 30000
      # 用来检测数据库连接是否有效的sql 必须是一个查询语句(oracle中为 select 1 from dual)
      validation-query: select 'x'
      # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-borrow: false
      # 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-return: false
      # 是否缓存preparedStatement, 也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说oracle,在mysql下建议关闭。
      pool-prepared-statements: false
      # 置监控统计拦截的filters，去掉后监控界面sql无法统计，stat: 监控统计、Slf4j:日志记录、waLL: 防御sqL注入
      filters: stat,wall,slf4j
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      max-pool-prepared-statement-per-connection-size: -1
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
      web-stat-filter:
        # 是否启用StatFilter默认值true
        enabled: true
        # 添加过滤规则
        url-pattern: /*
        # 忽略过滤的格式
        exclusions: /druid/*,*.js,*.gif,*.jpg,*.png,*.css,*.ico

      stat-view-servlet:
        # 是否启用StatViewServlet默认值true
        enabled: true
        # 访问路径为/druid时，跳转到StatViewServlet
        url-pattern: /druid/*
        # 是否能够重置数据
        reset-enable: false
        # 需要账号密码才能访问控制台，默认为root
        login-username: druid
        login-password: druid
        # IP白名单
        allow: 127.0.0.1
        # IP黑名单（共同存在时，deny优先于allow）
        deny:
  ## ===========================================================================
  ## 第三方登录
  ## ===========================================================================
  security:
    oauth2:
      client:
        registration:
          github:
            client-id: 8af1ccba09c2cfda8c81
            client-secret: 6373298b26f5e219e357b55d5efa59d695194703
  data:
    # ===========================================================================
    # Redis
    # ===========================================================================
    redis:
      database: 0
      host: 127.0.0.1
      port: 6379
      timeout: 5000
    # ===========================================================================
    # Mongodb
    # ===========================================================================
    mongodb:
      uri: mongodb://127.0.0.1:27017/graduation_design
      host: 127.0.0.1
      port: 27017
      authentication-database: admin
      username: graduation_design
      password: 962464
      database: graduation_design
  # ===========================================================================
  # ElasticSearch配置
  # ===========================================================================
  elasticsearch:
    uris: http://127.0.0.1:19200
    username: elastic
    password: elastic
  # ===========================================================================
  # 文件配置
  # ===========================================================================
  servlet:
    multipart:
      max-file-size: 500MB
      max-request-size: 500MB
# 应用配置
app:
  # 文件下载路径
  download-path: C:\\myFile\\download\\
  # 文件上传路径
  upload-path: C:\\myFile\\upload\\
  # 支持的文件类型数组
  file-type-array: .png,.jpg,.jpeg,.txt,.zip,.rar,.pdf,.xml,xls
  # 最大文件大小限制
  max-file-size: 8192

mybatis:
  typeAliasesPackage: com.zhku.ayelsh.web_kali_liunx.file.pojo.ExcelEntity
  mapperLocations: classpath:mybatis/mapper/*.xml
## ===========================================================================
## 日期格式
## ===========================================================================
jackson:
  date-format: yyyy-MM-dd HH:mm:ss
  time-zone: GMT+8
## ===========================================================================
## security
## ===========================================================================
#  security:
#    oauth2:
#      resourceserver:
#        jwt:
#          jwk-set-uri: ${auth-server}/getPublicKey
#
#auth-server: http://localhost:8080
#
#security:
#  oauth2:
#    client:
#      client-id: client
#      client-secret: secret
#      access-token-uri:  ${auth-server}/oauth/token
#      user-authorization-uri:  ${auth-server}/oauth/authorize
#    resource:
#      token-info-uri:  ${auth-server}/oauth/check_token
#      user-info-uri: ${auth-server}/me
#    sso:
#      login-path: /login

#        provider:
#          github:
#            authorization-uri: https://github.com/login/oauth/authorize
#            token-uri: https://github.com/login/oauth/access_token
#            user-info-uri: https://api.github.com/user

#            redirect-uri: http://localhost:80/oauth_github/redirect
#            user-name-attribute: sub
#            jwk-set-uri: https://your-subdomain.oktapreview.com/oauth2/v1/keys
#
#
#
#          gitee:
#            clientId: 0856e484e49672ca066cb1aee4ab3c98285af16bba0fef87a5570694e547a16d
#            clientSecret: 32ffc09a3347fcca221625b44f735b6837766240cbfc978aa882cd8c74ed2ed1
#            authorizeUrl: https://gitee.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&response_type=code
#            redirectUrl : http://localhost:80/oauth_gitee/redirect
#            accessTokenUrl: https://gitee.com/oauth/token?grant_type=authorization_code
#            userInfoUrl: https://api.github.com/user





